[{"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/index.js":"1","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/App.js":"2","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/reportWebVitals.js":"3","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/layouts/DashboardLayout.js":"4","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/store.js":"5","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/layouts/loginLayout.js":"6","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/authReducer.js":"7","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Context/SocketContextProvider.js":"8","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Register/Register.jsx":"9","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Login/Login.jsx":"10","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Home/Home.jsx":"11","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Game/Game.jsx":"12","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Auth/Auth.jsx":"13","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Profile/Profile.jsx":"14","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/modalReducer.js":"15","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/socketReducer.js":"16","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/gameReducer.js":"17","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/api/api.js":"18","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/validator.js":"19","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/generateUID.js":"20","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/createMines.js":"21","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/colorsArray.js":"22","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/FormsControl/FormsControl.js":"23","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/ModalContainer.jsx":"24","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/EditModal/EditModalContainer.jsx":"25","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/config/config.js":"26","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/randomNumber.js":"27","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/Modal.jsx":"28","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/EditModal/EditModal.jsx":"29","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/optionsArr.js":"30","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/minesPercents.js":"31"},{"size":500,"mtime":1628596339396,"results":"32","hashOfConfig":"33"},{"size":2220,"mtime":1628596378192,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1628596339396,"results":"35","hashOfConfig":"33"},{"size":474,"mtime":1628596339396,"results":"36","hashOfConfig":"33"},{"size":635,"mtime":1628596339396,"results":"37","hashOfConfig":"33"},{"size":420,"mtime":1628596339396,"results":"38","hashOfConfig":"33"},{"size":2475,"mtime":1628596378196,"results":"39","hashOfConfig":"33"},{"size":547,"mtime":1628596378196,"results":"40","hashOfConfig":"33"},{"size":3016,"mtime":1628596339396,"results":"41","hashOfConfig":"33"},{"size":2729,"mtime":1628614465180,"results":"42","hashOfConfig":"33"},{"size":2506,"mtime":1628767823461,"results":"43","hashOfConfig":"33"},{"size":7269,"mtime":1628772697163,"results":"44","hashOfConfig":"33"},{"size":4542,"mtime":1628768639476,"results":"45","hashOfConfig":"33"},{"size":1073,"mtime":1628596378196,"results":"46","hashOfConfig":"33"},{"size":608,"mtime":1628596339396,"results":"47","hashOfConfig":"33"},{"size":7929,"mtime":1628596378196,"results":"48","hashOfConfig":"33"},{"size":10438,"mtime":1628596378196,"results":"49","hashOfConfig":"33"},{"size":1182,"mtime":1628596378192,"results":"50","hashOfConfig":"33"},{"size":101,"mtime":1628596339396,"results":"51","hashOfConfig":"33"},{"size":119,"mtime":1628596339396,"results":"52","hashOfConfig":"33"},{"size":354,"mtime":1628596339396,"results":"53","hashOfConfig":"33"},{"size":145,"mtime":1628761657123,"results":"54","hashOfConfig":"33"},{"size":485,"mtime":1628596339392,"results":"55","hashOfConfig":"33"},{"size":313,"mtime":1628596339396,"results":"56","hashOfConfig":"33"},{"size":510,"mtime":1628596378196,"results":"57","hashOfConfig":"33"},{"size":82,"mtime":1628785756085,"results":"58","hashOfConfig":"33"},{"size":152,"mtime":1628596339396,"results":"59","hashOfConfig":"33"},{"size":872,"mtime":1628614487041,"results":"60","hashOfConfig":"33"},{"size":2506,"mtime":1628784475393,"results":"61","hashOfConfig":"33"},{"size":509,"mtime":1628689886292,"results":"62","hashOfConfig":"33"},{"size":274,"mtime":1628690361659,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"19yur8j",{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/index.js",[],["139","140"],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/App.js",["141"],"import './App.css';\nimport React from \"react\";\nimport {BrowserRouter, Switch} from \"react-router-dom\";\nimport {connect, Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport DashboardLayoutRoute from \"./layouts/DashboardLayout\";\nimport LoginLayoutRoute from \"./layouts/loginLayout\";\nimport Register from \"./components/Register/Register\";\nimport Login from \"./components/Login/Login\";\nimport Home from \"./components/Home/Home\";\nimport Game from \"./components/Game/Game\";\nimport Auth from \"./components/Auth/Auth\";\nimport {setAuthUserData} from \"./redux/reducers/authReducer\";\nimport {compose} from \"redux\";\nimport {SocketContextProvider} from \"./components/Context/SocketContextProvider\";\nimport Profile from \"./components/Profile/Profile\";\n\n\nclass App extends React.Component {\n\n  checkConnection = () => {\n    if (JSON.parse(localStorage.getItem('user'))) {\n      let user = JSON.parse(localStorage.getItem('user'));\n      if (user.timestamp > Date.now() - 3600000) {\n        this.props.setAuthUserData(user.userId, user.userName, user.token)\n      } else {\n        window.localStorage.removeItem('user');\n        this.props.setAuthUserData(null, null, null)\n      }\n    } else {\n      this.props.setAuthUserData(null, null, null)\n    }\n  }\n\n  componentDidMount() {\n    this.checkConnection();\n    setInterval(() => {\n      console.log(111)\n      this.checkConnection()\n    }, 1000)\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Auth/>\n        <Switch>\n          <DashboardLayoutRoute exact path='/profile' component={Profile}/>\n          <DashboardLayoutRoute exact path='/' component={Home}/>\n          <DashboardLayoutRoute exact path='/game/:gameId' component={Game}/>\n          <LoginLayoutRoute path='/register' component={Register}/>\n          <LoginLayoutRoute path='/login' component={Login}/>\n        </Switch>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => ({})\n\nlet AppContainer = compose(\n  connect(mapStateToProps, {setAuthUserData}))\n(App);\n\nconst mainApp = () => {\n  console.log()\n  return (\n    <BrowserRouter>\n        <Provider store={store}>\n          <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default mainApp;\n\n\n","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/reportWebVitals.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/layouts/DashboardLayout.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/store.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/layouts/loginLayout.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/authReducer.js",["142"],"import {authAPI} from \"../../api/api\";\nimport {reset} from \"redux-form\";\n\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA';\nconst SET_IS_CONNECTED = 'SET_IS_CONNECTED';\n\nlet initialState = {\n    userId: null,\n    userName: null,\n    token: null,\n    isConnected: false\n};\n\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_AUTH_USER_DATA:\n            return {\n                ...state,\n                ...action.data\n            };\n\n            case SET_IS_CONNECTED:\n            return {\n                ...state,\n               isConnected: true\n            };\n        default:\n            return state;\n    }\n};\n\nexport const setAuthUserData = (userId, userName, token) => ({\n    type: SET_AUTH_USER_DATA,\n    data: {userId, userName, token}\n});\n\nexport const setIsConnected = () => ({\n    type: SET_IS_CONNECTED\n});\n\n\nexport const login = (password, userName) => async (dispatch) => {\n    try {\n        let response = await authAPI.login(password, userName);\n        console.log(response);\n        if (response.statusText === 'OK') {\n            dispatch(reset('register'))\n            let {userId, userName, token} = response.data;\n            dispatch(setAuthUserData(userId, userName, token));\n            let user = {\n                userId,\n                userName,\n                token,\n                timestamp: Date.now()\n            }\n            console.log(1)\n            window.localStorage.setItem(\"user\", JSON.stringify(user))\n\n        }\n        else {\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n            // alert(message)\n        }\n    }\n    catch (err) {\n        // alert(err.response.data.message)\n        console.log(\"err\", err);\n    }\n\n};\n\nexport const register = (password, userName, repeatPassword) => async (dispatch) => {\n    try {\n        if(password === repeatPassword) {\n            let response = await authAPI.register(password, userName);\n            if (response.statusText === 'OK') {\n                dispatch(reset('register'))\n                alert('you have registered')\n            } else {\n                let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n                alert(message);\n            }\n        }\n        else {\n            alert(\"Password mismatch\")\n        }\n\n    } catch (err) {\n        alert(err.response.data.message);\n    }\n\n};\n\nexport default authReducer;","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Context/SocketContextProvider.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Register/Register.jsx",["143","144"],"import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/FormsControl/FormsControl\";\nimport {required} from \"../../utils/validator\";\nimport classes from \"../Login/Login.module.css\";\nimport {connect} from \"react-redux\";\nimport {register} from \"../../redux/reducers/authReducer\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport board from '../../assets/image/board.png';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faTimes, faHome, faUserCircle} from \"@fortawesome/free-solid-svg-icons\";\n\nconst RegisterForm = (props) => {\n    return <div className={classes.container}>\n        <div className={classes.wrap}>\n            <div>\n                <h1 className={classes.title}>\n                    Sign up your account\n                </h1>\n            </div>\n            <form onSubmit={props.handleSubmit}>\n                <Field placeholder={\"User name\"} name={\"userName\"} validate={[required]}\n                       component={Input}/>\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\n                       validate={[required]}\n                       component={Input}/>\n                <Field placeholder={\"Repeat password\"} name={\"repeatPassword\"}\n                       type={\"password\"}\n                       validate={[required]}\n                       component={Input}/>\n                {props.error && <div className={classes.formError}>{props.error}</div>}\n                <div>\n                    <input value=\"Sign up\" type=\"submit\" className={`${classes.padding} ${classes.marginButton}`}/>\n                </div>\n                <div className={classes.topBorderItem}>\n                    <NavLink to={\"/login\"} className={classes.itemText}>\n                    <span>\n                        Do you already have an account? Sign in\n                    </span>\n                    </NavLink>\n                </div>\n            </form>\n        </div>\n    </div>\n}\n\nconst RegisterReduxForm = reduxForm({form: 'register'})(RegisterForm)\n\nconst Register = (props) => {\n    const onSubmit = async (formData) => {\n        props.register(formData.password, formData.userName, formData.repeatPassword);\n    }\n    if (props.userData.token) {\n        return <Redirect to={\"/\"}/>\n    }\n    return <div className={classes.wrapMain}>\n        <div title={'Home'} className={classes.exit}><NavLink to={'/'}><FontAwesomeIcon className={`${classes.marginHome} fa-lg`} icon={faHome}/></NavLink></div>\n        <div className={classes.wrapper}>\n            <div className={classes.wrapImg}>\n                <img className={classes.img}\n                     src={board}\n                     alt=\"\"/>\n            </div>\n            <div className={classes.wrapTitle}><h1>Messenger</h1></div>\n        </div>\n        <RegisterReduxForm onSubmit={onSubmit}/>\n    </div>\n}\n\nconst mapStateToProps = (state) => ({\n    userData: state.auth\n})\n\nexport default connect(mapStateToProps, {register})(Register);","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Login/Login.jsx",["145"],"import React from 'react';\nimport {Field, reduxForm} from \"redux-form\";\nimport {Input} from \"../../common/FormsControl/FormsControl\";\nimport {required} from \"../../utils/validator\";\nimport classes from \"./Login.module.css\";\nimport {connect} from \"react-redux\";\nimport {NavLink, Redirect} from \"react-router-dom\";\nimport {login} from \"../../redux/reducers/authReducer\";\nimport board from \"../../assets/image/board.png\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faHome} from \"@fortawesome/free-solid-svg-icons\";\n\nconst LoginForm = (props) => {\n    return <div className={classes.container}>\n\n        <div className={classes.wrap}>\n            <div>\n                <h1 className={classes.title}>\n                    Enter\n                </h1>\n            </div>\n            <form onSubmit={props.handleSubmit}>\n                <Field placeholder={\"Email\"} name={\"userName\"} validate={[required]}\n                       component={Input}/>\n                <Field placeholder={\"Password\"} name={\"password\"}\n                       type={\"password\"}\n                       validate={[required]}\n                       component={Input}/>\n                <div>\n                    <input value=\"Sign in\" type=\"submit\" className={`${classes.padding} ${classes.marginButton}`}/>\n\n                </div>\n                <div className={classes.topBorderItem}>\n                    <NavLink to={\"/register\"} className={classes.itemText}>\n                    <span>\n                        Sign up your account\n                    </span>\n                    </NavLink>\n                </div>\n            </form>\n        </div>\n    </div>\n}\n\nconst LoginReduxForm = reduxForm({form: 'login'})(LoginForm)\n\nclass Login extends React.Component {\n\n    // props.setIdRoom(null);\n\n    onSubmit = async (formData) => {\n        // this.props.setIdRoom(null)\n        // this.props.setInRoom(null)\n        this.props.login(formData.password, formData.userName)\n    }\n\n    componentWillUnmount() {\n\n    }\n\n    render() {\n\n    return <div className={classes.wrapMain}>\n        <div title={'Home'} className={classes.exit}><NavLink to={'/'}><FontAwesomeIcon className={`${classes.marginHome} fa-lg`} icon={faHome}/></NavLink></div>\n        <div className={classes.wrapper}>\n            <div className={classes.wrapImg}>\n                <img className={classes.img}\n                     src={board}\n                     alt=\"\"/>\n            </div>\n            <div className={classes.wrapTitle}><h1>Messenger</h1></div>\n        </div>\n        <LoginReduxForm onSubmit={this.onSubmit}/>\n    </div>\n}\n}\n\nconst mapStateToProps = (state) => ({\n    userData: state.auth\n})\n\nexport default connect(mapStateToProps, {login})(Login);","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Home/Home.jsx",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Game/Game.jsx",["146","147","148","149","150","151"],"import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from 'react-router-dom';\nimport classes from './Game.module.css';\nimport {createMines} from \"../../utils/createMines\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faBomb} from \"@fortawesome/free-solid-svg-icons\";\nimport {checkCell, findMine, getInfoGame} from \"../../redux/reducers/gameReducer\";\nimport colorsArray from \"../../common/colorsArray\";\n\n\nclass Game extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isGaming: true,\n      isRender: false,\n      isReady: false\n    }\n  }\n\n  onReady = () => {\n    this.props.socket.emit(\"game/readiness\", {isReady: true, gameId: this.props.match.params.gameId}, (data) => {\n    })\n    this.setState({\n      isReady: true\n    })\n  }\n\n  onNotReady = () => {\n    this.props.socket.emit(\"game/readiness\", {isReady: false, gameId: this.props.match.params.gameId}, (data) => {\n    })\n    this.setState({\n      isReady: false\n    })\n  }\n\n  startGame = () => {\n    this.props.socket.emit(\"game/start\", {gameId: this.props.match.params.gameId})\n    this.props.getInfoGame(this.props.match.params.gameId);\n  }\n\n  onSurrender = () => {\n    this.props.socket.emit(\"game/surrender\", {gameId: this.props.match.params.gameId})\n    // this.props.getInfoGame(this.props.match.params.gameId);\n  }\n\n  onShowHistory = (action) => {\n    this.props.socket.emit(\"game/showHistory\", {action})\n    // this.props.getInfoGame(this.props.match.params.gameId);\n  }\n\n  onExitFromGame = () => {\n    this.props.socket.emit(\"game/exit\");\n    this.props.history.push(`/`);\n  }\n\n  render() {\n\n    console.log(\"this.props.usersReadiness\", this.props.usersReadiness)\n    console.log(\"this.props.informationGame.isplaying\", this.props.informationGame )\n    let isGameOver = this.props.isGameOver;\n\n    const sendAction = (i, j) => {\n      // this.props.checkCell(i, j)\n      this.props.socket.emit(\"game/action\", {i, j}, (data) => {\n      })\n    }\n\n    const checkCell = (i, j) => {\n      this.props.checkCell(i, j)\n    }\n\n    const findMine = (i, j) => {\n      this.props.findMine(i, j)\n    }\n\n    let rows = this.props.tableTwoDimensional && this.props.tableTwoDimensional.map(function (item, i) {\n      let entry = item.map(function (element, j) {\n        return (\n          // <td onClick={() => {checkCell(i, j); findMine(i, j)}} className={classes.itemCell} key={j}> {element.isMine ? <FontAwesomeIcon icon={faBomb} /> : (element.isOpen && element.amountOfMines === 0) ? '' : element.amountOfMines} </td>\n          // <td onClick={() => {checkCell(i, j); findMine(i, j)}} className={`${element.isBlownUp && classes.blownUpBackground} ${element.isOpen && !element.isMine && element.amountOfMines === 0 && classes.emptyOpened} ${classes.itemCell}`} key={j}> {element.isMine && isGameOver ? <FontAwesomeIcon icon={faBomb} /> : (element.isOpen && !element.isMine && element.amountOfMines > 0 && element.amountOfMines) } </td>\n          <td onClick={() => {\n            sendAction(i, j)\n          }}\n              className={` ${element.isBlownUp && classes.blownUpBackground} ${element.isOpen && !element.isMine && element.amountOfMines !== 0 && classes[`background` + colorsArray[element.userId % 10]]} ${element.isOpen && !element.isMine && element.amountOfMines === 0 && classes[`background` + colorsArray[element.userId % 10]]} ${classes.itemCell}`}\n              key={j}> {element.isMine && element.isBlownUp ? <FontAwesomeIcon\n            icon={faBomb}/> : (element.isOpen && !element.isMine && element.amountOfMines > 0 && element.amountOfMines)} </td>\n        );\n      });\n      return (\n        <tr key={i}> {entry} </tr>\n      );\n    });\n\n    let maxPlayers = this.props.gamesList.filter(item => {\n      return item.gameid === this.props.match.params.gameId\n    })\n\n    let isStarting = this.props.usersReadiness.find(item => {\n      return !item.isReady\n    })\n\n    let whoMove = this.props.usersReadiness.find(item => {\n      return item.movePosition\n    })\n    return (\n      <div className={classes.wrapMain}>\n        <div>{this.props.userName}</div>\n        <div className={classes.itemBlockLeft}>\n          {/*<div onClick={() => {drawingMap(tableTwoDimensional)}}>DRAWING MAP</div>*/}\n          {this.props.isGameOver && <div>GAME OVER</div>}\n          {this.props.win && <div>YOU ARE WINNER</div>}\n          <table>\n            {rows}\n          </table>\n          {!this.props.surrendered && this.props.informationGame.isplaying && <button onClick={() => {\n            this.onSurrender()\n          }}>Surrender</button>}\n          <div>list players:\n            {/*<div>owner: {this.props.gameOwner && this.props.gameOwner.username}</div>*/}\n            {\n              this.props.usersReadiness.map(item => {\n                return <div\n                  className={`${item.isReady && classes.activeUser} ${item.movePosition && classes.activeMove}`}>{item.username}</div>\n              })}</div>\n\n          {this.props.listViewers.length > 0 &&\n          <div>list viewers: {this.props.listViewers.map(item => item.username)} </div>}\n          {maxPlayers[0] &&\n          <div>Players: {this.props.usersInRoom[this.props.match.params.gameId]}/{maxPlayers[0].maxplayers}</div>}\n          {this.props.informationGame.isplaying || this.props.surrendered ? '' : (this.props.gameOwner && this.props.gameOwner.username !== JSON.parse(localStorage.getItem('user')).userName) ? !this.props.isReady ?\n            <button onClick={() => {\n              this.onReady()\n            }}>Ready</button> : <button onClick={() => {\n              this.onNotReady()\n            }}>Not ready</button> : ''}\n          {!this.props.informationGame.isplaying && !isStarting ? (maxPlayers[0] && maxPlayers[0].owner == JSON.parse(localStorage.getItem('user')).userId) &&\n            <button onClick={() => {\n              this.startGame()\n            }}>START GAME</button> : ''}\n          <button onClick={() => {\n            this.onExitFromGame()\n          }}>Exit from game\n          </button>\n        </div>\n        <div className={classes.itemBlockRight}>\n          {this.props.listLogs.map(item => {\n            return <div><button onClick={() => {\n              this.onShowHistory(item.history)\n            }} className={classes.itemHistory}>{item.username} i: {item.history.i};\n              j: {item.history.j} value: {item.amountofmines}</button></div>\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  gameInfo: state.gamePage.gameInfo,\n  tableTwoDimensional: state.gamePage.tableTwoDimensional,\n  isGameOver: state.gamePage.isGameOver,\n  socket: state.socketPage.socket,\n  gamesList: state.gamePage.gamesList,\n  usersInRoom: state.gamePage.usersInRoom,\n  usersInGame: state.gamePage.usersInGame,\n  usersReadiness: state.gamePage.usersReadiness,\n  gameOwner: state.gamePage.gameOwner,\n  win: state.gamePage.win,\n  informationGame: state.gamePage.informationGame,\n  surrendered: state.gamePage.surrendered,\n  listViewers: state.gamePage.listViewers,\n  listLogs: state.gamePage.listLogs,\n  isReady: state.gamePage.isReady,\n  userName: state.auth.userName\n})\n\nexport default withRouter(connect(mapStateToProps, {\n  checkCell, findMine, getInfoGame\n})(Game));\n","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Auth/Auth.jsx",["152"],"import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {Redirect, withRouter} from \"react-router-dom\";\nimport {generateUID} from '../../utils/generateUID'\nimport {SocketContextProvider} from \"../Context/SocketContextProvider\";\nimport {io} from \"socket.io-client\";\nimport {setIsRender, setSocket} from \"../../redux/reducers/socketReducer\";\nimport {\n  setGame,\n  setGameOver,\n  setGamesList,\n  setInformationGame,\n  setIsReady,\n  setListLogs,\n  setListUsersInRoom,\n  setListViewers,\n  setPlayerStats,\n  setSurrendered,\n  setUsersInRoom,\n  setUsersListReadiness,\n  setWin\n} from \"../../redux/reducers/gameReducer\";\nimport {baseUrl} from '../../common/config/config'\n\nclass Auth extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isRender: false\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.token && !this.props.isRender) {\n      console.log(\"RENDER\")\n      let socket;\n      socket = io(baseUrl, {\n        query: {\n          tabId: JSON.parse(sessionStorage.getItem('tabId')),\n          loggeduser: this.props.token\n        }\n      });\n\n      const oldEmit = socket.emit.bind(socket)\n      socket.emit = (...args) => {\n        console.log('Socket <=:', ...args);\n        return oldEmit(...args);\n      }\n\n      // console.log(\"sockett_ID\", socket.id)\n      socket.on(\"connect\", () => {\n        console.log(\"sockett_ID\", socket.id)\n        this.props.setSocket(socket);\n      });\n\n\n      socket.on(\"game/new\", (data) => {\n        this.props.setGame({game: data.dataTable});\n        this.props.setListLogs([]);\n        this.props.setSurrendered(false);\n        this.props.setWin({win: false});\n        this.props.setGameOver({blownUp: false});\n        this.props.setListViewers([]);\n        if (!data.game) {\n          this.props.history.push(`/game/${data.gameId}`)\n        } else if (data.game.isplaying || data.game.isfinished) {\n          this.props.history.push(`/game/${data.gameId}`)\n        }\n      })\n\n      socket.on(\"game/action\", (data) => {\n        this.props.setGame({game: data.dataTable, isMine: data.isMine});\n      })\n\n      socket.on(\"game/list\", (data) => {\n        this.props.setGamesList(data);\n      })\n\n      socket.on(\"game/refresh\", (data) => {\n        if (data.game.isplaying || data.game.isfinished) {\n          this.props.history.push(`/game/${data.gameId}`)\n        }\n      })\n\n      socket.on(\"game/users\", (data) => {\n        this.props.setUsersInRoom(data);\n      })\n\n      socket.on(\"game/delete/byOwner\", (data) => {\n        if (data.gameDeletedByOwner) {\n          this.props.history.push(`/`)\n        }\n        // this.props.setUsersInRoom(data);\n      })\n\n      socket.on(\"game/isReady\", (data) => {\n        console.log(\"game_isReady\", data)\n        this.props.setIsReady(data);\n      })\n\n      socket.on(\"game/listReadiness\", (data) => {\n        this.props.setUsersListReadiness(data);\n      })\n\n      socket.on(\"game/win\", (data) => {\n        this.props.setWin(data);\n      })\n\n      socket.on(\"game/blownUp\", (data) => {\n        this.props.setGameOver(data);\n      })\n\n      socket.on(\"game/info\", (data) => {\n        this.props.setInformationGame(data.game);\n      })\n\n      socket.on(\"game/surrendered\", (data) => {\n        this.props.setSurrendered(data.surrendered);\n      })\n\n      socket.on(\"game/listViewers\", (data) => {\n        this.props.setListViewers(data.listViewers);\n      })\n\n      socket.on(\"game/playerStats\", (data) => {\n        this.props.setPlayerStats(data.playerStats);\n      })\n\n      socket.on(\"game/listLogs\", (data) => {\n        this.props.setListLogs(data.history);\n      })\n\n      socket.on(\"game/set/users\", (data) => {\n        this.props.setListUsersInRoom(data);\n      })\n\n      this.props.setIsRender(true)\n    }\n  }\n\n  render() {\nconsole.log(\"render\")\n    if (!JSON.parse(sessionStorage.getItem('tabId'))) {\n      let tabId = generateUID();\n      window.sessionStorage.setItem(\"tabId\", JSON.stringify(tabId))\n    }\n\n\n    if (!this.props.token) return <Redirect to={'/login'}/>\n\n    if (this.props.token) {\n      return <Redirect to={'/'}/>\n    }\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  token: state.auth.token,\n  isRender: state.socketPage.isRender\n})\n\n\nexport default withRouter(connect(mapStateToProps, {\n  setSocket,\n  setGame,\n  setIsRender,\n  setGamesList,\n  setUsersInRoom,\n  setUsersListReadiness,\n  setGameOver,\n  setWin,\n  setInformationGame,\n  setSurrendered,\n  setListViewers,\n  setListLogs,\n  setPlayerStats,\n  setListUsersInRoom,\n  setIsReady\n})(Auth));","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Profile/Profile.jsx",["153","154"],"import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport classes from './Profile.module.css';\nimport {NavLink} from \"react-router-dom\";\n\n\nconst Profile = (props) => {\n\n\n  useEffect(() => {\n    props.socket && props.socket.emit(\"game/getPlayerStats\")\n  }, [])\n\n  let playerStat = props.playerStats.filter(item => item.userid == props.userId)\nconsole.log(\"playerStat\", playerStat)\n\n  return <div className={classes.mainWrap}>\n    <NavLink to={'/'} className={classes.leftItem}>\n      Home\n    </NavLink>\n    <div className={classes.rightItem}>\n      <div>\n      Name: {props.userName}\n      </div>\n      <div>\n        Amount of loss: {playerStat[0] ? playerStat[0].lossamount : 0}\n      </div>\n      <div>\n        Amount of win : {playerStat[0] ? playerStat[0].winamount : 0}\n      </div>\n      </div>\n  </div>\n}\n\nconst mapStateToProps = (state) => ({\n  userName: state.auth.userName,\n  userId: state.auth.userId,\n  socket: state.socketPage.socket,\n  playerStats: state.gamePage.playerStats\n})\n\nexport default connect(mapStateToProps, {})(Profile);","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/modalReducer.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/socketReducer.js",["155","156"],"import {historyApi} from \"../../api/api\";\nconst SET_SOCKET = 'SET_SOCKET';\nconst SET_USERS_TO_ROOM = 'SET_USERS_TO_ROOM';\nconst SET_ROOMS = 'SET_ROOMS';\nconst SET_IN_ROOM = 'SET_IN_ROOM';\nconst SET_ID_ROOM = 'SET_ID_ROOM';\nconst SET_ROOM_HISTORY = 'SET_ROOM_HISTORY';\nconst UPDATE_MESSAGE = 'UPDATE_MESSAGE';\nconst RESET_ROOM_HISTORY = 'RESET_ROOM_HISTORY';\nconst SET_IS_MOUNTED = 'SET_IS_MOUNTED';\nconst SET_IS_SOCKET = 'SET_IS_SOCKET';\nconst SET_IS_CONNECTED = 'SET_IS_CONNECTED';\nconst SET_IS_DISCONNECTED = 'SET_IS_DISCONNECTED';\nconst SET_IS_RENDER = 'SET_IS_RENDER';\n\nlet initialState = {\n  socket: null,\n  users: [],\n  rooms: [],\n  inRoom: null,\n  idRoom: null,\n  roomHistory: [],\n  isMounted: false,\n  isOneRendered: false,\n  isSocketExist: false,\n  isConnected: false,\n  isDisconnected: false,\n  isRender: false\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_SOCKET:\n      // console.log(\"SOCKET_ID_ACTION\", action.socket.id)\n      return {\n        ...state,\n        socket: action.socket\n      };\n\n      case SET_IS_RENDER:\n      // console.log(\"SOCKET_ID_ACTION\", action.socket.id)\n      return {\n        ...state,\n        isRender: action.isRender\n      };\n      case SET_IS_SOCKET:\n      return {\n        ...state,\n        isSocketExist: action.isSocketExist\n      };\n      case SET_IS_DISCONNECTED:\n        alert( action.isDisconnected)\n      return {\n        ...state,\n        isDisconnected: action.isDisconnected\n      };\n      case SET_IS_CONNECTED:\n      return {\n        ...state,\n        isConnected: true\n      };\n    case SET_IS_MOUNTED:\n      return {\n        ...state,\n        isMounted: true,\n        isOneRendered: false\n      };\n    case SET_ID_ROOM:\n      return {\n        ...state,\n        idRoom: action.idRoom\n      };\n    case RESET_ROOM_HISTORY:\n      return {\n        ...state,\n        roomHistory: []\n      };\n    case UPDATE_MESSAGE:\n     let clone = JSON.parse(JSON.stringify(state.roomHistory));\n     let flag = false;\n     console.log(\"clone\", clone)\n      clone.forEach(item => {\n        let arrText = item.text.split(' ');\n        console.log(\"arrText\", arrText)\n        if((arrText[0] === action.userName && arrText[1] === 'joined') || (arrText[1] && arrText[1] === action.userName) ) {\n          flag = true;\n        }\n      })\n      let lastRecord = clone[clone.length - 1] && clone[clone.length - 1].text.split(' ');\n\n      if(!action.message && ((state.roomHistory.length >= 0) && !flag) || clone.length === 0 || (lastRecord[2] && lastRecord[2] === 'left' && lastRecord[1] === action.userName)) {\n        console.log(\"cloneclone\", clone);\n        clone.push({name: 'admin', text: `Welcome, ${action.userName}`})\n        return {\n          ...state,\n          roomHistory: clone\n        };\n      }\n      else if(!action.message ){\n        return state;\n      }\n      clone.push(action.message);\n      console.log(\"action.message\", action.message)\n      console.log(\"clone\", clone)\n\n\n\n      // console.log(\"roomHistory\", state.roomHistory);\n      // let clone;\n      // if (!action.message.text && state.roomHistory.length === 0) {\n      //   clone = JSON.parse(JSON.stringify(state.roomHistory));\n      //   action.message.text = `Welcome, ${action.userName}`\n      //   clone.push(action.message);\n      // } else if (!action.message.text && state.roomHistory.length !== 0) {\n      //   return state\n      // } else {\n      //   clone = JSON.parse(JSON.stringify(state.roomHistory));\n      //   clone.push(action.message);\n      // }\n      return {\n        ...state,\n        roomHistory: clone\n      };\n    case SET_ROOMS:\n      return {\n        ...state,\n        rooms: action.rooms\n      };\n\n    case SET_ROOM_HISTORY:\n      console.log(\"ACTION, ACTION\", action.roomId);\n      console.log(\"ACTION, ACTION\", state.idRoom);\n      if(state.idRoom && state.idRoom !== action.roomId) return {...state}\n      console.log(\"ACTION, ACTION\", action);\n      console.log(\"ACTION_HISTORY\", action.history);\n      console.log(\"STATE\", state.roomHistory);\n      // if(!action.message) {\n      //   actio.push({name: 'Admin', text: `Welcome, ${action.userName}`})\n      // }\n      if(action.history.length === 1) {\nreturn state;\n      }\n\n      let wordsLastHistory = action.history[action.history.length-1].text.split(' ');\n      if(wordsLastHistory[1] && wordsLastHistory[1] === 'joined' && wordsLastHistory[0] === `${action.userName}`) {\n        action.history.pop();\n      }\n      console.log(\"[wordsLastHistory]\", wordsLastHistory)\n      // if (state.roomHistory.length === 0) return state;\n      // let roomHistoryClone = JSON.parse(JSON.stringify(state.roomHistory));\n      // let wordsUserName = action.history.map(item => item.text.split(' '))\n      // console.log(\"ACTION_HISTORY\", action.history);\n      // let newHistory = action.history.filter((item, index) => {\n      //   return (!(wordsUserName[index][1] && wordsUserName[index][1] === action.userName && wordsUserName[index][2] === 'joined')) && !(wordsUserName[index][0] === 'Welcome,' && wordsUserName[index][1] !== action.userName)\n      // })\n      // let wordsNewHistory = newHistory.map(item => item.text.split(' '));\n      // let modifiedHistory = newHistory.map((item, index) => {\n      //   if ((wordsNewHistory[index][0] === 'User' && wordsNewHistory[index][1] === action.userName && wordsNewHistory[index][2] && wordsNewHistory[index][2] === 'left')) {\n      //     item.text = 'You are left';\n      //   } else if ((wordsNewHistory[index][0] === 'Welcome,' && wordsNewHistory[index][1] === action.userName)) {\n      //     item.text = 'You are joined';\n      //   }\n      //   return item\n      // })\n      // console.log(\"modifiedHistory\", modifiedHistory);\n      // let wordMidified = modifiedHistory.map(item => item.text.split(' '))\n      // modifiedHistory.length > 0 && wordMidified[wordMidified.length - 1][0] === 'You' && modifiedHistory.splice(-1, 1);\n\n      // historySortByCreatedDate(action.history);\n      return {\n        ...state,\n        roomHistory: action.history,\n        isOneRendered: true\n      };\n    case SET_IN_ROOM:\n      return {\n        ...state,\n        inRoom: action.inRoom\n      };\n    case SET_USERS_TO_ROOM:\n      return {\n        ...state,\n        ...state.users,\n        users: action.users\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setSocket = (socket) => ({\n  type: SET_SOCKET,\n  socket\n});\n\nexport const setIsRender = (isRender) => ({\n  type: SET_IS_RENDER,\n  isRender\n});\n\nexport const setIsSocket = (isSocketExist) => ({\n  type: SET_IS_SOCKET,\n  isSocketExist\n});\n\nexport const setUsersToRoom = (users) => ({\n  type: SET_USERS_TO_ROOM,\n  users\n});\n\nexport const setIsConnected = () => ({\n  type: SET_IS_CONNECTED,\n});\n\nexport const setIsDisconnected = (isDisconnected) => ({\n  type: SET_IS_DISCONNECTED,\n  isDisconnected\n});\n\nexport const setIsMounted = () => ({\n  type: SET_IS_MOUNTED,\n});\n\nexport const setRooms = (rooms) => ({\n  type: SET_ROOMS,\n  rooms\n})\n\nexport const setInRoom = (inRoom) => ({\n  type: SET_IN_ROOM,\n  inRoom\n})\n\nexport const setIdRoom = (idRoom) => ({\n  type: SET_ID_ROOM,\n  idRoom\n});\n\nexport const setRoomHistory = (history, userName, roomId) => ({\n  type: SET_ROOM_HISTORY,\n  history, userName, roomId\n});\n\nexport const updateMessage = (message, userName) => ({\n  type: UPDATE_MESSAGE,\n  message, userName\n});\n\nexport const resetRoomHistory = () => ({\n  type: RESET_ROOM_HISTORY,\n});\n\nexport const getRoomHistory = (roomId, userName) => async (dispatch) => {\n  try {\n    let response = await historyApi.getRoomHistory(roomId);\n    let modifiedResponse = response.data.map(item => {\n      let obj = {...item.history};\n      obj.createdat = item.createdat;\n      return obj;\n    });\n    console.log('[HISTORY]', response)\n    dispatch(setRoomHistory(modifiedResponse, userName, response.data[0].roomid))\n  } catch (err) {\n    console.log(err);\n  }\n\n};\n\nexport default authReducer;","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/redux/reducers/gameReducer.js",["157","158","159","160","161","162","163","164","165"],"import {createMines} from \"../../utils/createMines\";\nimport classes from \"../../components/Game/Game.module.css\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faBomb} from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport {authAPI, gameApi} from \"../../api/api\";\nimport {reset} from \"redux-form\";\nimport {setAuthUserData} from \"./authReducer\";\n\nconst SET_GAME_INFO = 'SET_GAME_INFO';\nconst SET_TABLE = 'SET_TABLE';\nconst CHECK_CELL = 'CHECK_CELL';\nconst FIND_MINE = 'FIND_MINE';\nconst SET_GAME = 'SET_GAME';\nconst SET_GAMES_LIST = 'SET_GAMES_LIST';\nconst SET_USERS_IN_ROOM = 'SET_USERS_IN_ROOM';\nconst SET_USERS_LIST_READINESS = 'SET_USERS_LIST_READINESS';\nconst SET_GAME_OVER = 'SET_GAME_OVER';\nconst SET_WIN = 'SET_WIN';\nconst SET_INFORMATION_GAME = 'SET_INFORMATION_GAME';\nconst SET_SURRENDERED = 'SET_SURRENDERED';\nconst SET_LIST_VIEWERS = 'SET_LIST_VIEWERS';\nconst SET_LIST_LOGS = 'SET_LIST_LOGS';\nconst SET_PLAYER_STATS = 'SET_PLAYER_STATS';\nconst SET_ALL_USERS_IN_ROOM = 'SET_ALL_USERS_IN_ROOM';\nconst SET_IS_READY = 'SET_IS_READY';\n\n\nlet initialState = {\n  gameInfo: null,\n  tableTwoDimensional: [],\n  isGameOver: false,\n  gamesList: [],\n  usersInRoom: {},\n  usersInGame: [],\n  usersReadiness: [],\n  gameOwner: {},\n  win: false,\n  informationGame: false,\n  surrendered: false,\n  listViewers: [],\n  listLogs: [],\n  playerStats: [],\n  isReady: false\n};\n\nconst gameReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_GAME:\n      return {\n        ...state,\n        tableTwoDimensional: action.game,\n      };\n    case SET_ALL_USERS_IN_ROOM:\n      return {\n        ...state,\n        usersInRoom: action.usersInRooms,\n      };\n      case SET_IS_READY:\n      return {\n        ...state,\n        isReady: action.data.isReady,\n      };\n    case SET_SURRENDERED:\n      return {\n        ...state,\n        surrendered: action.surrendered,\n      };\n    case SET_LIST_VIEWERS:\n      return {\n        ...state,\n        listViewers: action.listViewers,\n      };\n    case SET_LIST_LOGS:\n      return {\n        ...state,\n        listLogs: action.listLogs,\n      };\n    case SET_USERS_LIST_READINESS:\n      let arrListReadiness = [];\n      let arrTabs = Object.keys(action.data.listReadiness);\n      arrTabs.forEach(item => {\n        let obj = {...action.data.listReadiness[item]};\n        console.log(\"obj\", obj)\n        obj.tabid = item;\n        arrListReadiness.push(obj);\n      })\n      console.log(\"gameOwner\", action.data.gameOwner)\n      return {\n        ...state,\n        usersReadiness: arrListReadiness,\n        gameOwner: action.data.gameOwner\n      };\n    case SET_GAMES_LIST:\n      return {\n        ...state,\n        gamesList: action.gamesList,\n      };\n    case SET_INFORMATION_GAME:\n      return {\n        ...state,\n        informationGame: action.gameInfo,\n      };\n    case SET_GAME_OVER:\n      return {\n        ...state,\n        isGameOver: action.data.blownUp,\n      };\n    case SET_PLAYER_STATS:\n\n      return {\n        ...state,\n        playerStats: action.playerStats,\n      };\n    case SET_WIN:\n      return {\n        ...state,\n        win: action.data.win,\n      };\n    case SET_USERS_IN_ROOM:\n      let usersInRoom = JSON.parse(JSON.stringify(state.usersInRoom));\n      console.log(\"action.data1\", action.data);\n      if(action.data.usersUniq.length == 0) {\n        return {\n          ...state\n        }\n      }\n      usersInRoom[action.data.gameid] = action.data.usersUniq.length;\n      console.log(\"usersInRoom_REDUCER\", usersInRoom)\n      return {\n        ...state,\n        usersInRoom: usersInRoom,\n      };\n    case SET_GAME_INFO:\n      return {\n        ...state,\n        gameInfo: action.gameInfo,\n      };\n    case CHECK_CELL:\n\n      // push the first empty cell/point\n      // LOOP until queue non empty\n      // pop.head cell and reveal it\n      // push the empty surrounding cells of it (8 at maximum)\n      // (you must flag the cells so you don't push them again,\n      // ie dont push the cells that are already revealed)\n      //\n\n      let arr = [];\n      let clonedTableTwoDimensional = JSON.parse(JSON.stringify(state.tableTwoDimensional));\n      if (clonedTableTwoDimensional[action.i][action.j].isMine) {\n        return {\n          ...state\n        }\n      }\n      if (clonedTableTwoDimensional[action.i][action.j].amountOfMines !== 0) {\n        clonedTableTwoDimensional[action.i][action.j].isOpen = true;\n        return {\n          ...state,\n          tableTwoDimensional: clonedTableTwoDimensional,\n        };\n      }\n      arr.push(clonedTableTwoDimensional[action.i][action.j])\n      while (arr.length > 0) {\n\n        let element = arr.shift();\n        console.log(\"ELEMENT\", element)\n        console.log(\"clonedTableTwoDimensional\", clonedTableTwoDimensional)\n        clonedTableTwoDimensional[element.i][element.j].isOpen = true;\n\n        for (let i = 0; i < 3; i++) {\n          for (let j = 0; j < 3; j++) {\n            if (clonedTableTwoDimensional[element.i - 1 + i] && clonedTableTwoDimensional[element.i - 1 + i][element.j - 1 + j]) {\n              if (clonedTableTwoDimensional[element.i - 1 + i][element.j - 1 + j].amountOfMines === 0 && clonedTableTwoDimensional[element.i - 1 + i][element.j - 1 + j].isOpen === false) {\n                arr.push(clonedTableTwoDimensional[element.i - 1 + i][element.j - 1 + j])\n              }\n              clonedTableTwoDimensional[element.i - 1 + i][element.j - 1 + j].isOpen = true\n            }\n\n          }\n        }\n      }\n\n      return {\n        ...state,\n        tableTwoDimensional: clonedTableTwoDimensional,\n      };\n    case FIND_MINE:\n      let clonedTable = JSON.parse(JSON.stringify(state.tableTwoDimensional));\n      clonedTable[action.i][action.j].isOpen = true;\n      if (clonedTable[action.i][action.j].isMine) {\n        clonedTable[action.i][action.j].isBlownUp = true;\n      }\n      // clonedTable[action.i][action.j].isMine\n      return {\n        ...state,\n        tableTwoDimensional: clonedTable,\n        isGameOver: clonedTable[action.i][action.j].isMine,\n      };\n\n    case SET_TABLE:\n\n      let firstPoint = 1;\n      let sizeOfField = state.gameInfo.fieldSize.split('x');\n      let coordinatesForMines = createMines(state.gameInfo.minesAmount, +sizeOfField[1], +sizeOfField[0]);\n\n      let lastPoint = +sizeOfField[0];\n      let tableTwoDimensional = [];\n      for (let i = 1; i <= sizeOfField[1]; i++) {\n        let data = []\n        for (let j = firstPoint; j <= lastPoint; j++) {\n          data.push({isMine: false, isOpen: false, isChecked: false})\n        }\n        firstPoint += +sizeOfField[0]\n        lastPoint += +sizeOfField[0]\n        tableTwoDimensional.push(data)\n      }\n\n      coordinatesForMines.forEach(item => {\n        tableTwoDimensional[item.firstCoordinate][item.lastCoordinate].isMine = true;\n      })\n\n      for (let i = 0; i < tableTwoDimensional.length; i++) {\n        for (let j = 0; j < tableTwoDimensional[i].length; j++) {\n          tableTwoDimensional[i][j].i = i;\n          tableTwoDimensional[i][j].j = j;\n          let amountMines = 0;\n          if (!tableTwoDimensional[i][j].isMine) {\n            (tableTwoDimensional[i][j - 1] && tableTwoDimensional[i][j - 1].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i][j + 1] && tableTwoDimensional[i][j + 1].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i - 1] && tableTwoDimensional[i - 1][j].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i + 1] && tableTwoDimensional[i + 1][j].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i + 1] && tableTwoDimensional[i + 1][j - 1] && tableTwoDimensional[i + 1][j - 1].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i + 1] && tableTwoDimensional[i + 1][j + 1] && tableTwoDimensional[i + 1][j + 1].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i - 1] && tableTwoDimensional[i - 1][j + 1] && tableTwoDimensional[i - 1][j + 1].isMine) ? amountMines += 1 : amountMines += 0;\n            (tableTwoDimensional[i - 1] && tableTwoDimensional[i - 1][j - 1] && tableTwoDimensional[i - 1][j - 1].isMine) ? amountMines += 1 : amountMines += 0;\n          }\n          tableTwoDimensional[i][j].amountOfMines = amountMines;\n        }\n      }\n\n      return {\n        ...state,\n        tableTwoDimensional: tableTwoDimensional,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setGame = ({game, isMine = undefined}) => ({type: SET_GAME, game, isMine});\nexport const setUsersInRoom = (data) => ({type: SET_USERS_IN_ROOM, data});\nexport const setUsersListReadiness = (data) => ({type: SET_USERS_LIST_READINESS, data});\nexport const setGameOver = (data) => ({type: SET_GAME_OVER, data});\nexport const setWin = (data) => ({type: SET_WIN, data});\nexport const setListViewers = (listViewers) => ({type: SET_LIST_VIEWERS, listViewers});\nexport const setListLogs = (listLogs) => ({type: SET_LIST_LOGS, listLogs});\nexport const setPlayerStats = (playerStats) => ({type: SET_PLAYER_STATS, playerStats});\nexport const setListUsersInRoom = (usersInRooms) => ({type: SET_ALL_USERS_IN_ROOM, usersInRooms});\nexport const setIsReady = (data) => ({type: SET_IS_READY, data});\n\nexport const setGamesList = (gamesList) => ({type: SET_GAMES_LIST, gamesList});\n\nexport const setGameInfo = (gameInfo) => ({type: SET_GAME_INFO, gameInfo});\nexport const setTable = () => ({type: SET_TABLE});\nexport const setInformationGame = (gameInfo) => ({type: SET_INFORMATION_GAME, gameInfo});\nexport const checkCell = (i, j) => ({type: CHECK_CELL, i, j});\nexport const findMine = (i, j) => ({type: FIND_MINE, i, j});\nexport const setSurrendered = (surrendered) => ({type: SET_SURRENDERED, surrendered});\nexport const setGameInfoAndSetTable = (gameInfo) => async (dispatch) => {\n  dispatch(setGameInfo(gameInfo));\n  dispatch(setTable());\n};\nexport const getInfoGame = (gameId) => async (dispatch) => {\n\n  try {\n    let response = await gameApi.getInformationGame(gameId);\n    console.log(\"responseresponse\", response);\n    if (response.statusText === 'OK') {\n      dispatch(setInformationGame(response.data));\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    }\n  } catch (err) {\n    alert(err.response.data.message)\n    console.log(\"err\", err.response.data.message);\n  }\n\n\n};\nexport default gameReducer;","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/api/api.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/validator.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/generateUID.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/createMines.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/colorsArray.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/FormsControl/FormsControl.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/ModalContainer.jsx",["166"],"import React from 'react';\nimport {connect} from \"react-redux\";\nimport Modal from \"./Modal\";\n// import {getWholeTodoListPage} from \"../../redux/selectors/todoListSelectors\";\n\nlet mapStateToProps = (state) => {\n  return {\n    modalPage: state.modalPage,\n  }\n};\n\n\nexport default connect(mapStateToProps, {})(Modal);","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/EditModal/EditModalContainer.jsx",["167"],"import React from 'react';\nimport {connect} from \"react-redux\";\nimport EditModal from \"./EditModal\";\nimport {\n  closeModal\n} from \"../../../redux/reducers/modalReducer\";\nimport {setGameInfo, setGameInfoAndSetTable} from \"../../../redux/reducers/gameReducer\";\nimport {withRouter} from \"react-router-dom\";\n\nlet mapStateToProps = (state) => {\n  return {\n    socket: state.socketPage.socket\n  }\n};\n\n\nexport default withRouter(connect(mapStateToProps, {closeModal, setGameInfoAndSetTable, setGameInfo})(EditModal));","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/config/config.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/utils/randomNumber.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/Modal.jsx",["168"],"import React from \"react\";\nimport './style.css'\n\nclass Modal extends React.Component {\n    constructor(props) {\n        super(props);\n\n    }\n\n    render() {\n        const {isOpen, content} = this.props.modalPage;\n        if (!isOpen) return null;\n\n        return (\n            <div className=\"modal\">\n                <div className=\"modal-dialog\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\">{content.props.title}</h5>\n                            <button type=\"button\" className=\"close\">\n                                <span>&times;</span>\n                            </button>\n                        </div>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Modal;","/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/components/Modal/EditModal/EditModal.jsx",["169","170","171"],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/optionsArr.js",[],"/home/user/WebstormProjects/mines-test/minesweeper-multiplayer/minesweeper-client/src/common/minesPercents.js",[],{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","severity":1,"message":"177","line":15,"column":9,"nodeType":"178","messageId":"179","endLine":15,"endColumn":30},{"ruleId":"176","severity":1,"message":"180","line":61,"column":17,"nodeType":"178","messageId":"179","endLine":61,"endColumn":24},{"ruleId":"176","severity":1,"message":"181","line":11,"column":9,"nodeType":"178","messageId":"179","endLine":11,"endColumn":16},{"ruleId":"176","severity":1,"message":"182","line":11,"column":26,"nodeType":"178","messageId":"179","endLine":11,"endColumn":38},{"ruleId":"176","severity":1,"message":"183","line":7,"column":18,"nodeType":"178","messageId":"179","endLine":7,"endColumn":26},{"ruleId":"176","severity":1,"message":"184","line":5,"column":9,"nodeType":"178","messageId":"179","endLine":5,"endColumn":20},{"ruleId":"176","severity":1,"message":"185","line":64,"column":9,"nodeType":"178","messageId":"179","endLine":64,"endColumn":19},{"ruleId":"176","severity":1,"message":"186","line":72,"column":11,"nodeType":"178","messageId":"179","endLine":72,"endColumn":20},{"ruleId":"176","severity":1,"message":"187","line":76,"column":11,"nodeType":"178","messageId":"179","endLine":76,"endColumn":19},{"ruleId":"176","severity":1,"message":"188","line":106,"column":9,"nodeType":"178","messageId":"179","endLine":106,"endColumn":16},{"ruleId":"189","severity":1,"message":"190","line":140,"column":105,"nodeType":"191","messageId":"192","endLine":140,"endColumn":107},{"ruleId":"176","severity":1,"message":"177","line":5,"column":9,"nodeType":"178","messageId":"179","endLine":5,"endColumn":30},{"ruleId":"193","severity":1,"message":"194","line":12,"column":6,"nodeType":"195","endLine":12,"endColumn":8,"suggestions":"196"},{"ruleId":"189","severity":1,"message":"190","line":14,"column":65,"nodeType":"191","messageId":"192","endLine":14,"endColumn":67},{"ruleId":"197","severity":1,"message":"198","line":91,"column":26,"nodeType":"199","messageId":"200","endLine":91,"endColumn":28},{"ruleId":"197","severity":1,"message":"198","line":91,"column":72,"nodeType":"199","messageId":"200","endLine":91,"endColumn":74},{"ruleId":"176","severity":1,"message":"201","line":2,"column":8,"nodeType":"178","messageId":"179","endLine":2,"endColumn":15},{"ruleId":"176","severity":1,"message":"202","line":3,"column":9,"nodeType":"178","messageId":"179","endLine":3,"endColumn":24},{"ruleId":"176","severity":1,"message":"203","line":4,"column":9,"nodeType":"178","messageId":"179","endLine":4,"endColumn":15},{"ruleId":"176","severity":1,"message":"204","line":5,"column":8,"nodeType":"178","messageId":"179","endLine":5,"endColumn":13},{"ruleId":"176","severity":1,"message":"205","line":6,"column":9,"nodeType":"178","messageId":"179","endLine":6,"endColumn":16},{"ruleId":"176","severity":1,"message":"206","line":7,"column":9,"nodeType":"178","messageId":"179","endLine":7,"endColumn":14},{"ruleId":"176","severity":1,"message":"207","line":8,"column":9,"nodeType":"178","messageId":"179","endLine":8,"endColumn":24},{"ruleId":"189","severity":1,"message":"190","line":123,"column":39,"nodeType":"191","messageId":"192","endLine":123,"endColumn":41},{"ruleId":"176","severity":1,"message":"180","line":282,"column":11,"nodeType":"178","messageId":"179","endLine":282,"endColumn":18},{"ruleId":"176","severity":1,"message":"204","line":1,"column":8,"nodeType":"178","messageId":"179","endLine":1,"endColumn":13},{"ruleId":"176","severity":1,"message":"204","line":1,"column":8,"nodeType":"178","messageId":"179","endLine":1,"endColumn":13},{"ruleId":"208","severity":1,"message":"209","line":5,"column":5,"nodeType":"210","messageId":"211","endLine":8,"endColumn":6},{"ruleId":"176","severity":1,"message":"212","line":4,"column":9,"nodeType":"178","messageId":"179","endLine":4,"endColumn":20},{"ruleId":"176","severity":1,"message":"213","line":4,"column":22,"nodeType":"178","messageId":"179","endLine":4,"endColumn":44},{"ruleId":"176","severity":1,"message":"214","line":60,"column":9,"nodeType":"178","messageId":"179","endLine":60,"endColumn":14},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"no-unused-vars","'SocketContextProvider' is defined but never used.","Identifier","unusedVar","'message' is assigned a value but never used.","'faTimes' is defined but never used.","'faUserCircle' is defined but never used.","'Redirect' is defined but never used.","'createMines' is defined but never used.","'isGameOver' is assigned a value but never used.","'checkCell' is assigned a value but never used.","'findMine' is assigned a value but never used.","'whoMove' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.socket'. Either include it or remove the dependency array.","ArrayExpression",["217"],"no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'classes' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faBomb' is defined but never used.","'React' is defined but never used.","'authAPI' is defined but never used.","'reset' is defined but never used.","'setAuthUserData' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'setGameInfo' is defined but never used.","'setGameInfoAndSetTable' is defined but never used.","'regex' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},"Update the dependencies array to be: [props.socket]",{"range":"220","text":"221"},[282,284],"[props.socket]"]